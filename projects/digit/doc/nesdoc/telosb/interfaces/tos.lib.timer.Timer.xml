<?xml version="1.0" ?><interfacedef loc="53:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" nicename="tos.lib.timer.Timer" qname="Timer">
      <documentation loc="36:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
        <short>
 A Timer is TinyOS's general purpose timing interface.</short>
        <long>
 A Timer is TinyOS's general purpose timing interface. For more precise
 timing, you may wish to use a (platform-specific) component offering
 an Alarm interface.

 &lt;p&gt;A Timer is parameterised by its &quot;precision&quot; (milliseconds,
 microseconds, etc), identified by a type. This prevents, e.g.,
 unintentionally mixing components expecting milliseconds with those
 expecting microseconds as those interfaces have a different type.

 &lt;p&gt;See TEP102 for more details.

 @param precision_tag A type indicating the precision of this Alarm.

 @author Cory Sharp &lt;cssharp@eecs.berkeley.edu&gt;
</long>
      </documentation>
      <parameters>
        <typedef loc="53:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="precision_tag" ref="0x40713a58">
          <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
          <type-var alignment="U:" size="U:"><typedef-ref name="precision_tag" ref="0x40713a58" scoped=""/></type-var>
        </typedef>
      </parameters>
      <function command="" loc="136:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="getNow" provided="0" ref="0x40723250">
        <documentation loc="132:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Return the current time.</short>
          <long>
 Return the current time.
 @return Current time.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" loc="83:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="fired" provided="0" ref="0x407250c8">
        <documentation loc="80:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>
 Signaled when the timer expires (one-shot) or repeats (periodic).
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="114:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="startPeriodicAt" provided="0" ref="0x40724220">
        <documentation loc="100:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Set a periodic timer to repeat every dt time units.</short>
          <long>
 Set a periodic timer to repeat every dt time units. Replaces any
 current timer settings. The &lt;code&gt;fired&lt;/code&gt; will be signaled every
 dt units (first event at t0+dt units). Periodic timers set in the past
 will get a bunch of events in succession, until the timer &quot;catches up&quot;.

 &lt;p&gt;Because the current time may wrap around, it is possible to use
 values of t0 greater than the &lt;code&gt;getNow&lt;/code&gt;'s result. These
 values represent times in the past, i.e., the time at which getNow()
 would last of returned that value.

 @param t0 Base time for timer.
 @param dt Time until the timer fires.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="114:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="t0" ref="0x40725ec0">
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </variable>
          <variable loc="114:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="dt" ref="0x407240c0">
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="98:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="isOneShot" provided="0" ref="0x40725a18">
        <documentation loc="94:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Check if this is a one-shot timer.</short>
          <long>
 Check if this is a one-shot timer.
 @return TRUE for one-shot timers, FALSE for periodic timers.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="bool" ref="0x40384e80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="151:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="getdt" provided="0" ref="0x40723bc8">
        <documentation loc="146:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Return the delay or period for the previously started timer.</short>
          <long>
 Return the delay or period for the previously started timer. The next
 fired event will occur at gett0() + getdt().
 @return Timer's interval.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="144:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="gett0" provided="0" ref="0x40723698">
        <documentation loc="138:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Return the time anchor for the previously started timer or the time of
 the previous event for periodic timers.</short>
          <long>
 Return the time anchor for the previously started timer or the time of
 the previous event for periodic timers. The next fired event will occur
 at gett0() + getdt().
 @return Timer's base time.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="92:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="isRunning" provided="0" ref="0x40725558">
        <documentation loc="86:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Check if timer is running.</short>
          <long>
 Check if timer is running. Periodic timers run until stopped or
 replaced, one-shot timers run until their deadline expires.

 @return TRUE if the timer is still running.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="bool" ref="0x40384e80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="64:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="startPeriodic" provided="0" ref="0x40726168">
        <documentation loc="56:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Set a periodic timer to repeat every dt time units.</short>
          <long>
 Set a periodic timer to repeat every dt time units. Replaces any
 current timer settings. Equivalent to startPeriodicAt(getNow(),
 dt). The &lt;code&gt;fired&lt;/code&gt; will be signaled every dt units (first
 event in dt units).

 @param dt Time until the timer fires.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="64:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="dt" ref="0x40726010">
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="129:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="startOneShotAt" provided="0" ref="0x40724c08">
        <documentation loc="116:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Set a single-short timer to time t0+dt.</short>
          <long>
 Set a single-short timer to time t0+dt. Replaces any current timer
 settings. The &lt;code&gt;fired&lt;/code&gt; will be signaled when the timer
 expires. Timers set in the past will fire &quot;soon&quot;.

 &lt;p&gt;Because the current time may wrap around, it is possible to use
 values of t0 greater than the &lt;code&gt;getNow&lt;/code&gt;'s result. These
 values represent times in the past, i.e., the time at which getNow()
 would last of returned that value.

 @param t0 Base time for timer.
 @param dt Time until the timer fires.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="129:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="t0" ref="0x407248c0">
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </variable>
          <variable loc="129:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="dt" ref="0x40724aa8">
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="73:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="startOneShot" provided="0" ref="0x40726800">
        <documentation loc="66:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Set a single-short timer to some time units in the future.</short>
          <long>
 Set a single-short timer to some time units in the future. Replaces
 any current timer settings. Equivalent to startOneShotAt(getNow(),
 dt). The &lt;code&gt;fired&lt;/code&gt; will be signaled when the timer expires.

 @param dt Time until the timer fires.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="73:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="dt" ref="0x407266a8">
            <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
              <typename><typedef-ref name="uint32_t" ref="0x40213250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="78:/home/zly/tinyos-main/tos/lib/timer/Timer.nc" name="stop" provided="0" ref="0x40726cd0">
        <documentation loc="75:/home/zly/tinyos-main/tos/lib/timer/Timer.nc">
          <short>
 Cancel a timer.</short>
          <long>
 Cancel a timer.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Timer" qname="Timer"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>